name: 'Terraform'
 
on:
  push:
    branches:
    - feature/*
    - develop
    - release/*
    - main
    - hotfix/*
  pull_request:
 
jobs:

  set_environment:
    outputs:
      my_env: ${{ steps.setenv.outputs.my_env }}
    runs-on: ubuntu-latest
    steps:
    - id: setenv
      run: |
        if  [[ ${{ github.ref }} == refs/heads/main ]] ;
        then
            echo "::set-output name=my_env::prd"
        fi
        if  [[ ${{ github.ref }} == refs/heads/develop ]] ;
        then
            echo "::set-output name=my_env::dev"
        fi
        if  [[ ${{ github.ref }} == refs/heads/feature/* ]] ;
        then
            echo "::set-output name=my_env::dev"
        fi
        if  [[ ${{ github.ref }} == refs/heads/release/* ]] ;
        then
            echo "::set-output name=my_env::tst"
        fi
        if  [[ ${{ github.ref }} == refs/heads/hotfix/* ]] ;
        then
            echo "::set-output name=my_env::tst"
        fi

  terraform:
    needs: set_environment
    name: 'Terraform'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.set_environment.outputs.my_env }}
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
 
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: 'Terraform setup'
      uses: hashicorp/setup-terraform@v1
 
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init -backend-config=storage_account_name=${{ secrets.TF_STORAGE_ACCOUNT_NAME }} -backend-config=container_name=${{ secrets.TF_CONTAINER_NAME }} -backend-config=key=${{ secrets.TF_KEY }} -backend-config=resource_group_name=${{ secrets.TF_RESOURCE_GROUP_NAME }}

    # select workspace
    - name: Terraform workspace list
      id: workspaceList
      run: |
        lst=$(terraform workspace list)
        echo "${lst}"
        if [[ "${lst}" != *"${{ needs.set_environment.outputs.my_env }}"* ]]; then
          terraform workspace new ${{ needs.set_environment.outputs.my_env }}
        fi
        terraform workspace select ${{ needs.set_environment.outputs.my_env }}

    - name: Terraform validate
      id: validate
      run: terraform validate

    - name: Install checkov
      id: installCheckov
      run: pip install checkov
         
    - name: Terraform plan
      id: plan
      run: terraform plan -out=out.tfplan
    
    - name: Checkov plan scan
      id: scanPlan
      run: |
        terraform show -json out.tfplan > out.json
        checkov -f ./out.json -o junitxml > Checkov-Plan-Report.xml
        ls -la
        cat ./Checkov-Plan-Report.xml
        cat ./out.json

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      with:
        check_name: Unit Test Results
        files: terraform/**/*.xml

    # - name: Terraform apply
    #   id: apply
    #   run: terraform apply out.tfplan
